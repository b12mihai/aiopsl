
LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.7.0 Change Log
=============================================================
Table:
	* API: Table location Macros change
FDMA:
	* Read ASA and PTA SRs - Expects a 64 bytes aligned workspace destination address due to a HW issue.
	* Optimize workaround for TKT237377: unite replace + close HW calls.
	* Replace ASA and PTA SRs - In REV1 Replace and represent option (SA=1) is not supported due to HW issue ERR008620.

IPSEC:
	* Performance optimization updates.
	* Error flow updates.
	* Added STE counters clear for SA add/delete.
	* Fixed ENGR355255, IPsec: incorrect SEC compressed format errors codes handling.
	* Fixed ENGR358512, IPSec FM: DSCP SET in the outer IP header is not functional for IPv6.
	* Fixed ENGR357856, IPSec FM: Fatal errors from FDMA when RE-USE buffer mode used
	* Fixed ENGR353336, IPsec FM: incorrect handling of PRC ASA Size in new buffer mode
	* Updated the error flow in the IPsec FM demo.

STE:
	* Added remarks that forbids the use of CDMA or FDMA to init counters.

IPR:
	* Fix ENGR358861.
	* Fix return status in case of L4 checksum error.
	* Fix ENGR356636 (remove extra relinquish).

IPF:
	* ENGR360390 (Fragmentation on Fragment (more fragment bit set) - More fragment bit is not set for the last fragment.
	
General:
	* Performance improvement for accelerators return. The following blocks were improved:
	  CDMA, FDMA, TMAN. 
	
LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.6.0.3 Change Log
=============================================================
IPR:
	* Remove unnecessary relinquish (CR:ENGR00356636)
FDMA:
	* Fix FDMA HW TKT260685 - use OSM to limit the number of concurrent vulnerable FDMA commands to 3.
	  Hence, user has only 3 nested scope levels (instead of 4).
OSM:
	* Fix FDMA HW TKT260685 - MASK 2 bits in the scope ID.
IPSEC: 
	* Implemeted WA for the following HW bug: 
		IPsec HW TKT265088 - “CAAM/SEC: The FD[BPID] is not updated after an AIOP operation”.
	* Adjust to new slab alignment.
	* Added DSCP set support (API change, ENGR341311).
  * Added support to SEC reuse buffer mode (API change).
  * Removed ip_nh from ipsec_encap_params struct (API change).
  * Integrated RTA version 0.6.3 (fsl-lssdk-v0.6.3), fix of issues ENGR354607 and ENGR355247.
  * Fixed issues with reuse buffer mode (ENGR355248).
  * Added slab un-reserve call to delete instance/sa (ipsec.c).
  * Updated IPv6 outer header payload length and added more algorithms in IPsec FM demo.




LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.6.0.2 Change Log
=============================================================
OSM:
	* Performance optimization: converted functions to inline.
CHECKSUM:
	* Performance optimization: converted functions to inline.
FDMA:
	* Fdma new API suggested by Howard including a partial fix for the fdma Hw issue.
IPR:
	* Stack optimization.
PARSER: 
	* New macros.
TABLE:
	* Fix for CQ ENGR346557 (table delete will not work on the device).
	* Bypass refcount (under ifdef DISABLE_REF_CNT).
	* Fix for ENGR00354623 (added ‘volatile’ to table_lookup_result fields).
CDMA:
	* Bypass refcount (under ifdef DISABLE_REF_CNT).
   

	
	
LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.6.0 Change Log
=============================================================
FDMA:
	* FDMA replicate functions can be called in order to replicate non-empty frames only (due to TKT258499).
	* FDMA trim - fix PRC update (ENGR353299).
	
TABLE:
	* Resolved ENGR346557 ("Table delete will not work on the device").
	* Performance optimization for switch case in acceleration return.

KEYGEN:
	* Fix for ENGR350116  (Valid Field takes 2 bytes in KCR instead of only 1 byte)
	
PARSER:
	* Removed Parser WA for TKT254635 (CTLU spec - requirement of data alignment)

Alignment:
	* FDMA SRs which implicitly compute representation address do not relocate segment on representing in order to keep former segment alignment.
	* Add FDMA documentation alignment restrictions due to TKT254635.
	* IPF – each fragment’s segment is presented in the presentation address of the original frame, in order to keep former segment alignment.
	* Alignment requirements were added to many SRs and FMs.
	* Alignment check for all relevant SRs/FMs under debug define.
	
STE:
  * Added comment on the required counter alignment in the STE API

TMAN:
  * Added second granularity define to the create timer.
  * Changed the TMAN exception handler to reduce stack size.

IPR:
  * SRs Errors.
  
IPsec:
  * Performance optimization.
  * Removed ip_nh from ipsec_encap_params struct (API change)
  * Removed ip_nh referencing from ipsec_fm_demo 
  * Added slab un-reserve call to delete instance/sa 
  * Fixed ipsec_early_init
  * Fixed SEC error return codes (ENGR347888)
  * Clear the PRC ASA Size, since the SEC does not preserve the ASA (ENGR353336)
  * Added Next Header setting through DPOVRD for tunnel mode encap (due to SEC issue TKT258803)
  * Updated the ipsec_fm_demo segment presentation for print & check

New/Updated functions:
  * sl_tman_expiration_task_prolog().
  * Inlining for all SRs used by complex IP forwarding.

Update demo and high functional NIC:
  * Handle dpni_drv_send() returned error for all demo.
  * Allocate 100 buffers for IPR per NIC.

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.3 Change Log
=============================================================
STE:
   * Fix constant definition typo in fsl_ste.h 
IPR:
   * Fix alignment of table_rule struct in case of delete rule.
   * Remove from API return status: IPR_MAXIMUM_NESTED_REACHED, IPR_ERROR.
   * Add to API return status: EIO, ENOSPC, ENOMEM, ETIMEDOUT, ENOTSUP.
   * Add ipr_early_init function.
   
IPsec:
   * Updated RTA (flib) to fsl-lssdk-v0.6.1, split key (DKP) support for legacy thread.
     (IPsec FM support for split key in Transport mode)
   * Fixed (temporary) ENGR347826, IPSec:ESP(3DES+None):Simulator crash observed while creating the SA descriptor
   * Updated the IPsec FM demo due to the Parser alignment fix
   
PARSER:
	* Added workaround to TKT254635 (CTLU spec - requirement of data alignment for parser  is not mentioned).

IPF:
	* Updated the IPF FM demo due to the Parser alignment fix
FDMA:
	* Add workaround to TKT254401 (FDMA Store of a newly created frame pass without storing the data).

	
LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.2 Change Log
=============================================================

IPsec:
   * Updated IPsec for split key (DKP) support
   * Updated RTA (flib) files to fsl-lssdk-v0.6
   * RTA changes from drop 0.5:
     - ENGR00341892  GCM16 create descriptor is Big Endian format and length field error
     - ENGR00344693  IPSec:Task termination/Error while creating the descriptor for authentication algorithm "none"
     - ENGR00330682 RTA : Enable SEC Checksum with IPsec descriptors commands
     - ENGR00345748 RTA: add support for DKP (Derived Key Protocol)
   * Updated ipsec_fm_demo to support additioal algorithms.

IPR:
  * Fix checksum calculation in case of non zero odd padding (CQ 342190)    

LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.1 Change Log
=============================================================
* The Application SW function registration is no more to the receive_cb() function. 
Instead It is done to the EPID entry. This means HW EPID entry will first call the application software and then 
application will call the inline function sl_prolog() in the beginning of the application. 
The sl_prolog() functionality is the same as the former receive_cb().The application function should use declaration 
spec called entry_point in-order the compiler would not strip off this code. The application must end with terminating 
the task by calling to fdma_terminate_task().

* The HM functions l4_set_tp_dst() and l4_set_tp_src() were removed.

* The following functions were inlined:
	- osm_scope_exit
	- cdma_read_with_mutex
	- cdma_read
	- cdma_mutex_lock_take
	- cdma_mutex_lock_release
	- table_lookup_by_keyid_default_frame 
	- table_lookup_by_key
	- fdma_replace_default_segment_data
	- fdma_copy_data

* IPsec:
Fixed CAAM descriptor endianness, including the following API changes (“-“ = old API, “+” = new API):

struct ipsec_encap_cbc_params
-              uint32_t iv[4];
+             uint8_t iv[16];

struct ipsec_encap_ctr_params
-              uint32_t ctr_nonce;
-              uint32_t iv[2];
+             uint8_t ctr_nonce[4];
+             uint64_t iv;

struct ipsec_encap_ccm_params
-              uint32_t salt; /**< lower 24 bits are used */
-              uint32_t iv[2];
+             uint8_t salt[4]; /**< lower 24 bits are used */
+             uint64_t iv;

struct ipsec_encap_gcm_params
-              uint32_t salt; /**< lower 24 bits are used */
-              uint32_t iv[2];
+             uint8_t salt[4]; /**< lower 24 bits are used */
+             uint64_t iv;

struct ipsec_decap_ctr_params
-              uint32_t ctr_nonce;
+             uint8_t ctr_nonce[4];

struct ipsec_decap_ccm_params
-              uint32_t salt;
+             uint8_t salt[4];

struct ipsec_decap_gcm_params {
-              uint32_t salt;
+             uint8_t salt[4];



LDPAA AIOP SERVICE LAYER LDPAA-AIOP-SL-v0.5.3.0 Change Log
=============================================================

* TMAN - Support TMAN spec version 1.0. 

* GSO - Added a workaround for PDM ticket TKT240996 - As it's mentioned in FDMA split command.

* IPF - Added a workaround for PDM ticket TKT240996 - As it's mentioned in FDMA split command.
	
* FDMA - add workaround for PDM ticket TKT237377 - As part of the workaround his command closes and reopens the segment. (meaning that all segment 
	modifications done in workspace but not included in the range of this command are lost).
* FDMA - add instructions how to workaround PDM ticket TKT240996 (split command).
	
* TABLE - Added workaround for PDM ticket TKT226361 ("Table delete never completes").

* IPsec 
    - Fixed ENGR00343015 (segment address preservation)
    - Fixed ipsec_get_ipv6_nh_offset, ENGR343032 
    - Removed IPSEC_CIPHER_AES_XTS, it is not a valid alg for IPsec
    - Fixed IPsec CCM B0 Flags for decap, ENGR341153
    - Fixed IPsec ipsec_get_seq_num, ENGR342270
    - Fixed IPsec CCM B0 Flags for encap, ENGR341153
    - Fixed IPsec ipsec_generate_sa_params(), ENGR342116

LDPAA AIOP SERVICE LAYER ALPHA V0.4.6 Change Log
===================================================
* Allow send/receive to/from two NI's - SPID assertion failure (ENGR00338045).

LDPAA AIOP SERVICE LAYER ALPHA V0.4.4 Change Log
===================================================
PARSER: Add parser_inline.h file for supporting parser inline commands.
PARSER: The following are inline functions:
	parse_result_generate()
	parse_result_generate_default()
	parse_result_generate_basic()
PARSER: non-fatal errors are supported.	
PARSER: changed parser_profile_query input parameter from parse_profile_record to parse_profile_input (to adjust CTLU spec 0.7.4)
KEYGEN: removed KEYGEN_KCR_ICMP_TYPE_FECID and KEYGEN_KCR_ICMP_CODE_FECID (not supported by HW).
KEYGEN: non-fatal errors are supported.	

TMAN: TMAN errors are supported in code but not fully verified. 
TMAN: Removed recharge function due to HW scope reduction.
TMAN: Changed timer delete function and TMI delete function to support HW Errata ERR008205
TMAN: Changed TMI create function to support HW Errata ERR008234
STE: Added macros and definitions for STE errors (the simulator still doesnt support STE errors)
STE: All STE functions except the barrier command were changed to be inline functions.

CDMA: Added cdma_inline.h file for supporting cdma inline commands. 
CDMA: The following are inline functions:
	cdma_refcount_increment()
	cdma_refcount_decrement()
CDMA: CDMA non-fatal errors are suported.
OSM: API - changed osm_scope_transition_to_exclusive_with_increment_scope_id return type to void.
OSM: API - changed osm_scope_transition_to_exclusive_with_new_scope_id return type to void.
OSM: API - changed osm_scope_transition_to_concurrent_with_increment_scope_id return type to void.
OSM: API - changed osm_scope_transition_to_concurrent_with_new_scope_id return type to void.
OSM: API - changed osm_scope_enter_to_exclusive_with_increment_scope_id return type to void.
OSM: API - changed osm_scope_enter_to_exclusive_with_new_scope_id return type to void.
OSM: API - changed osm_scope_enter return type to void.

There is no support for flow-id parameter when calling dpni_drv_register_rx_cb() or dpni_drv_unregister_rx_cb().
Added some optimizations to the dpni_drv_send() and receive_cb() functions.

Table SRs: API - Added a note to table_create() parameters that max rules must not be 0.
Table SRs: API - Added notes that some of the pointer must point to structures in the workspace (e.g. not SRAM).
Table SRs: API - Aging and auto removal of rules because of aging were removed from the API due to inputs that these are unnecessary. 
Table SRs: API - Removal of reference counter auto-decrement due to TKT216018 and due to that in some cases the decrement is better done outside of the function performance wise.(e.g. IPR)
Table SRs: API - Added a comment regarding deletion of table that contains a miss result of type reference pointer.
Table SRs: API - Added documentation regarding the key id parmaeter for both table_lookup_by_keyid() and table_lookup_be_keyid_default_frame() functions.
Table SRs: fix of ENGR00329133
Table SRs: fix of ENGR00330924
Table SRs: API - Added a remark that key size must be fixed per table.

HM: API - changed ip_cksum_calculate return type to void.

Doc & Tool compatibility for Release 0.4.4:
  Tool/Doc                      Version
 ----------                    ---------
AIOP_Archdef ................... 0.8.0
FD_section ..................... 0.62.3
CTLU_AIOP_bg ................... 0.7.4
TMan ........................... 0.7.81
Parser_Block_Guide ............. 3.09
AIOP_Instruction_Additions ..... 1.00
Compiler Build ................. 281
CW for DPAA .................... 10.0.11
Simulator ...................... LS_SIM_M0122
MC Firmware .................... 0.5.0
PowerISA ....................... 2.06
AIOP_z490_CPU_Specification .... Rev1.2


LDPAA AIOP SERVICE LAYER ALPHA V0.4.3 Change Log
===================================================
The following are changes from version v0.4.2:
* AIOP UART port change (changed from 1_0 to 2_0, to avoid sharing the port with Linux).

The following bugs have been fixed since version 0.4.2:
* IPR fix for short last fragment. CQ ENGR324372.
* IPR fix: deletion of created tables upon create instance is done. CQ ENGR00326971
* IPR fix: missing initialization in concurrent mode. CQ ENGR326943
* IPF: add alignment attribute to typedef ipf_ctx_t and remove requirement for 32B alignment from API.

SL TAG v0.4.1.update_02
===============================

Retrn statuses type is changed to int (instead of int32_t).

Added the following HM routines:
	ipv4_ts_opt_modification()
	ipv4_mangle()
	ipv4_dec_ttl_modification()
	ipv6_mangle()
	ipv6_dec_hop_limit_modification()
	l2_push_and_set_vlan()
	l2_arp_response()
	l2_set_hw_src_dst()
	
Added snic files for supporting command interface, Vlan insert/remove, IPR and IPF.
	snic.c
	snic.h
	
Change in dpni_drv_send()	- setting SPID from theDPNI structure.

system.c - change the setting of BPID for storage profile - now BPID=0 and no allocation is needed (Arena allocates buffers to this BPID).

ipr: call to function slab_find_and_fill_bpid() inside function ipr_create_instance() instead of in function ipr_init().

fsl_ipr.h: API - add min_frag_size_ipv6, flags change from 2 bytes to 4 bytes.
fsl_ipr.h: API - several functions (modify) to become void instead of int. 

Table SRs: API - Changed MFLU key descriptors structures (also for lookup) to match the new HW form.
Table SRs: API - Exceptions handling in all functions.
Table SRs: API - return type of functions that does not return errors due to exception handling was changed to void.
Table SRs: API - status value returned from functions were changed + documentation.
Table SRs: API - Add documentation that TABLE_ATTRIBUTE_LOCATION_INT is not supported for Rev1.
Table SRs: API - Functions that returned int32_t now return int.
Table SRs: API - Removed remarks regarding not suppoting MFLU rule operations in Rev1.
Table SRs: table_create() implementation - table_calc_num_entries_per_rule() was introduced to reduce cyclomatic complexity.
Table SRs: table_create() implementation - removed cdma error check since function will return void.

l4.c: l4_udp_tcp_cksum_calc - fixed ENGR316722

FDMA:
Update FDMA API according to descoped features in CCB TKT213227

Frame Operations:
Add file fsl_frame_operations:
	Move to fsl_frame_operations.h:
		create_frame()  (instead of fdma_create_frame())
		create_fd() (instead of fdma_create_fd())
	Add the following Frame operations routines:	
		create_arp_request_broadcast()
		create_arp_request()

Change file general.h to fsl_general.h.

IPF:
- Add IPv6 support
- Add fragments restoration feature
- Fixed ENGR00319625

KEYGEN:
- Changed keygen_kcr_builder_init() to void
	
PARSER:
- Fixed ENGR315932 	
- Add macros:
	PARSER_GET_GROSS_RUNNING_SUM_CODE_DEFAULT
	PARSER_GET_RUNNING_SUM_DEFAULT

Added file id_pool.c

CDMA:
fsl_cdma.h: API - several functions (modify) to become void instead of int. 		

SL Alpha v0.4  Change Log
===============================
IPR: out of order functionality.
IPR: IPv6 support.
IPR: concurrent mode support.
IPR: usage of slab allocator in init.
Table SRs: table_lookup_by_keyid was renamed to table_lookup_by_keyid_default_frame
Table SRs: table_lookup_by_keyid was introduced, supporting non default parameters
Table SRs: table status were updated
Table SRs: Removed ICID Error status
Table SRs: table verification files were updated
Table SRs: Added function specific return values documentation.
GRO: Add Timeout limit support.
GRO: Add IPv4 checksum support.
GRO: Add TCP checksum support.
GRO: Add IPv4 ECN support.
GRO: Add IPv4 timestamp support.
GRO: Add IPv6 support.
GRO: Add Metadata support.
GRO: Add TCP flags support.
GRO: Add unexpected sequence number support.
GRO: Add unexpected Ack number support.
GSO: Add IPv4 checksum support.
GSO: Add IPv4 option header support.
GSO: Add IPv4 ID generation support.
GSO: Add TCP option header support.
GSO: Add IPv4 option header support.
GSO: Add TCP Flags support.
GSO: Add TCP Checksum support.
fsl_gro.h: Add granularity field to timeout parameters.
fsl_fdma.h: Add concatenate command new output parameter- AMQ attributes.
keygen.c: Turned keygen_kcr_builder_add_generic_extract_fec flags into enum
keygen.c: Fixed ENGR310688 - In keygen_kcr_builder_init, Clear all KCR array instead of only the first byte.
system.c: usage of slab allocator in prpid and keyid pools creation.
system.c: Added Storage Profile Initialization.
system.h: Added storage profile struct and defines.
ipf.c: ipf_discard_frame_remainder is supported.
ipf.c: IPv4 options headers are supported.
ipf.c: IPv4 fragmentation of fragments is supported.
ipf.c: Added support in IPv6 ID
fsl_keygen.c: Added FSL_KEYGEN_KCR_CREATE_STATUS, FSL_KEYGEN_KCR_DELETE_STATUS
fsl_keygen.c: Turned keygen_kcr_builder_add_generic_extract_fec flags into enum
fsl_keygen.c: Some status changes
fsl_keygen.c: Changed FSL_KEYGEN_KCR_BUILDER_EXT_LOOKUP_RES_FIELD defines to enum kcr_builder_ext_lookup_res_field
fsl_parser.c: Added FSL_PARSER_PRP_CREATE_STATUS, FSL_PARSER_PRP_DELETE_STATUS
fsl_parser.c: Changed input to parser_profile_create() and parser_profile_replace() to be parse_profile_input struct (according to HW struct)
fsl_parser.c: Changed parser_profile_replace() from int32_t to void
fsl_parser.c: Some status changes


SL Pre-Alpha v0.3.3  Change Log
===============================

fsl_ipr.h: change return value type of ipr_get_reass_frm_cntr function.
fsl_ipr.h: change flags size in ipr_params (from 4 bytes to 2 bytes).
fsl_gro.h: Set granularity to a fixed 1mSec.
fsl_gro.h: change struct tcp_gro_context_params field name: metadata->metadata_addr.
fsl_fdma.h: Add fdma_close_segment() SR.
fsl_fdma.h: Add fdma_delete_segment_data() SR.
fsl_fdma.h: Add fdma_discard_fd() SR.
dpni_drv_rxtx.c: Added fdma_terminate_task() at the end of function receive_cb().
The CDMA functions (not include Errors) were updated according to ArchDef 0.7.5:
1. The size was removed from the acquire command.
2. The refcount was increased to 32 bits.
update some intrisic functions due to compiler 275 upgrade.
system.c: Changed implementation to use ARENA's function slab_find_and_fill_bpid.
system.c: Changed functions name:
                                             sys_ctlu_prpid_pool_create -> sys_prpid_pool_create
                                             sys_ctlu_keyid_pool_create -> sys_keyid_pool_create
system.c: Added functions aiop_sl_init() and aiop_sl_free().
fsl_ipf.c: Removed everything related to SFV bit (this bit is not needed).
ipf.c: Removed everything related to SFV bit (this bit is not needed).
ipf.h: Some changes in ipf internal structures.
fsl_parser.h: Changed parser_profile_replace() from void to int32_t and add status returned.
keygen.h: Some defines updates in order to comply with CTLU spec 0.7.2
keygen.c: Fixed ENGR310243 (In functions: keygen_kcr_builder_add_protocol_based_generic_fec() & keygen_kcr_builder_add_generic_extract_fec() 
the extract_size that these functions pass to the CTLU hardware is mistakenly greater by 1 than the required size.)
tman.c: Changing the tman code to support new compiler changes.
tman.c: adding mask to the return status of the timer query function
fsl_tman.h: Changed remarks in tman_get_timestamp function
fsl_tman.h: Fix in Timer query return tatus codes

SL Pre-Alpha v0.3.2  Change Log
===============================
general.h: remove receive_niid from TLS
dpni_drv_rxtx.c: check only parse_status in function receive_cb(). Removed receive_niid from the TLS and instead use macro PRC_GET_PARAMETER.
fsl_ctlu.h: table function were moved to fsl_table.h
fsl_ctlu.h: keygen and hash function were moved to fsl_keygen.h
fsl_ctlu.h: file was deleted.
fsl_table.h: ctlu_xxxx functions were renamed to table_xxxx functions
fsl_table.h: support in 0.7 CTLU specification
fsl_table.h: update miss result was renamed to replace miss result
fsl_table.h: Rule delete/replace/create_or_replace SRs now return the result of the rule that was replaced/deleted under certain conditions.
fsl_table.h: Replace miss result SR now returns the result of the rule that was replaced/deleted under certain conditions.
fsl_table.h: 16B alignment is now required for certain structures.
fsl_table.h: Status modification from 0.7 CTLU/MFLU spec
fsl_table.h: Miss result is only available in EM and LPM.
fsl_table.h: Accelerator ID was introduced (used as an input parameter)
fsl_table.h: Lookup key structure was introduced to consume less stack
fsl_table.h: A remark concerning get miss result and reference count was added.
fsl_table.h: Timestamp field was added to lookup result
fsl_table.h: LPM key sized were changed for 9 and 21 instead of 8 and 20 (IPv4/IPv6)
fsl_keygen.h: ctlu_xxxx functions were renamed to keygen_xxxx functions
fsl_keygen.h: support in 0.7 CTLU specification
fsl_keygen.h: 16B alignment is now required for certain structures.
fsl_keygen.h: Status modification from 0.7 CTLU/MFLU spec.
fsl_keygen.h: Added a new function: keygen_kcr_builder_add_input_value_fec().
fsl_keygen.h: Accelerator ID was introduced (used as an input parameter)
fsl_parser.h: Some changes to parse result to fit new spec.
fsl_parser.h: Added some new macros (related to routing header)
fsl_parser.h: Added setters to PRPID and starting HXS. 
fsl_parser.h: Status modification from 0.7 CTLU/MFLU spec.
fsl_l4_checksum.h: l4_udp_tcp_cksum_calc() polarity of the flag "update fdma" was inverted and is now "don't update fdma"
fsl_l4_checksum.h: status values were changed.
fsl_l4_checksum.h: no check for UDP/TCP is done at implementation.
fsl_l4_checksum.h: l4 checksum functionality was removed to fsl_l4.h .
fsl_ipv4_checksum.h: l4_udp_tcp_cksum_calc() polarity of the flag "update fdma" was inverted and is now "don't update fdma"
fsl_ipv4_checksum.h:status values were changed.
fsl_ipv4_checksum.h: ipv4 checksum functionality was removed to fsl_ip.h.
id_pool.h: Some implementation changes to consume less stack.
fsl_cdma.h: The following CDMA functions have been moved from fsl_cdma.h to cdma.h file:
	•	cdma_refcount_increment
	•	cdma_refcount_decrement
	•	cdma_write_lock_dma_read_and_increment
	•	cdma_write_release_lock_and_decrement
	refcount incr and decr will be part of slab API.
fsl_fdma.h:
	•	Change name: fdma_create_frame() -> fdma_create_fd() - this function returns an updated FD for the newly created frame.
	•	Add function: fdma_create_frame() - this function returns a frame handle for the newly created FDMA working frame.
	•	Change struct fdma_isolation_attributes to struct fdma_amq.
	•	Fix CQ: ENGR304324
	

SL Pre-Alpha v0.3.1  Change Log
===============================
ipr.h + ipr.c: IP checksum fix. use new fdma function. Fix reassembly with more than 2 fragments. 
dpni_drv.h: added dpni_get_receive_niid, dpni_set_send_niid, dpni_get_send_nii
dpni_drv_rxtx.c: added dpni_get_receive_niid, dpni_set_send_niid, dpni_get_send_niid
fsl_osm.h + osm.h: The order scope execution phase values was changed according to archdef_0.7.2 (0 = Concurrent mode, 1 = Exclusive mode).
fsl_cdma.h + cdma.c: Added cdma_refcount_get(). This routine returns the current value of reference count.
general.h: Added new macro (ADC_GET_ICID) to get ICID field.

fsl_fdma.h: 
	• Adjust to ArchDef 0.7.2:
		• Add AS flag (indicates usage of default AMQ attributes) to commands which present a frame (fdma_present_default_frame(), fdma_present_frame()).
		• Remove BMT (Bypass the Memory Translation) flag from Enqueue FD commands(fdma_enqueue_default_fd_fqid(), fdma_enqueue_fd_fqid(), fdma_enqueue_default_fd_qd(), fdma_enqueue_fd_qd()).
		• Change fdma_isolation_attributes structure field name: bdi_icid -> icid.
		• Remove flags parameter from fdma_read_default_frame_asa() SR.
	• Change fdma_queueing_destination_params structure field name: hash_value -> qdbin (HW alignmnet).
	
fsl_ipsec.h: unified hmo and options fields, changed callback type to void

SL Pre-Alpha v0.3  Change Log
=============================
spinlock.h: removed aiop_ prefix from aiop_atomic_incr8/16/32 and from aiop_atomic_decr8/16/32
fsl_ipr.h: change API: add a different return status for regular frames 
virtual_pools.h: 
	• added callback function typedef
	• added the "vpool_decr_total_bman_bufs	"function
virtual_pools.c:
	• updated vpool_refcount_decrement_and_release to release also in case of ref counter already at zero.
	• added the "vpool_decr_total_bman_bufs	"function,
fsl_cdma.h: The following CDMA functions have been moved from fsl_cdma.h to cdma.h file and replaced by new SLAB functions: 
	•	cdma_acquire_context_memory
	•	cdma_release_context_memory
	•	cdma_refcount_decrement_and_release
	•	cdma_access_context_memory

fsl_ipsec.h: API changes, updates and additions following a review.
fsl_ctlu.h: Added rule query function
ipf.c: New file.
ipf.h: Some changes in ipf internal structures.
gso.c: New file.
gso.h: Some changes in gso internal structures.
gro.c: New file.
gro.h: Some changes in gro internal structures.
fsl_fdma.h: Add fdma_acquire_buffer SR.
fsl_fdma.h: Add fdma_release_buffer SR.
fsl_fdma.h: Update fdma_present_default_frame_segment SR API.
		
Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6
	FD_section   0.62.2
	Parser_Block_Guide	3.40 (Maturity level 0.95)
	AIOP_Instruction_Additions 1.0
	Compiler Build 268
	CW for DPAA 10.0.5
	Simulator	DPAA Simulator 0_5_2_0068
	
SL Pre-Alpha v0.2  Change Log
=============================
fsl_fdma.h: Add fdma_present_frame_segment() explicit service routine.
fsl_fdma.h: Add insert_segment_data_command() explicit service routine.
fsl_fdma.h: Add explicit enqueue commands service routines.
fsl_fdma.h: add fdma_create_frame() function.
fdma.c: Add fdma_present_frame_segment() explicit service routine.
fdma.c: Add insert_segment_data_command() explicit service routine.
fdma.c: Add explicit enqueue commands service routines.
fdma.c: add fdma_create_frame() function.
fdma.c: fix CR:ENGR290881
fsl_gro.h: finalize API.
fsl_gso.h: finalize API.
fsl_ipf.h: finalize API.
fsl_ipr.h: finalize API.
parser.h: Add internal function parse_result_generate_checksum().
parser.c: Fix CR:ENGR00295530 
id_pool.h: Fix CR:ENGR00292371
id_pool.h: Fix CR:ENGR00292125
id_pool.h: Fix CR:ENGR00291705 
system.c: Fix CR:ENGR290657
system.c: Fix CR:ENGR291260 
dpni_drv.h: Introduce new DPNI driver code.
drv.h: Introduce new DPNI driver code.
dpni_drv_rxtx.c: Introduce new DPNI driver code.  


Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6
	FD_section   0.62.2
	Parser_Block_Guide	3.40 (Maturity level 0.95)
	AIOP_Instruction_Additions 0.60
	Compiler Build 265



SL Code Drop v0.1  Change Log
=============================
fsl_ipr.h: massive API changes
fsl_header_modification.h: changed to fsl_l2.h fsl_ip.h fsl_l4.h fsl_nat.h + all functions names changed
fsl_header_modification_open_flow.h: changed to fsl_l2.h fsl_ip.h fsl_l4.h fsl_nat.h + all functions names changed
fsl_header_modification_errors.h: rename to fsl_general_errors.h
fsl_aiop_ip_frag.h: changed name to fsl_ipf.h
fsl_ipf.h: Removed internal structure of IPF (moved to ipf.h)
fsl_ipf.h: Added definition of IPF_CONTEXT_SIZE and typedef ipf_ctx_t.
fsl_ipf.h: Changed functions parameters.
fsl_ipf.h: Changed statuses.
fsl_ipf.h: Removed flags IPF_FIRST_FRAG, IPF_COPY_ASA and IPF_DIS_HDR_FETCH.
fsl_ipf.h: Added FSL_IPF_SFV_MACROS. 
fsl_ipf.h: Renamed function generate_ip_frag() to ipf_generate_frag().
fsl_ipf.h: Added functions ipf_context_init() and ipf_discard_frame_remainder().
ipf.h: New file, contains initial internal API for IPF.
fsl_aiop_ipsec.h: change name to fsl_ipsec.h
fsl_ipsec.h: Changed documentation.
fsl_aiop_parser.h: change name to fsl_parser.h
fsl_aiop_parser.h: Some changes in FSL_PARSER_ERROR_CODES.
fsl_aiop_parser.h: Added define PARSER_IS_TUNNELED_IP_DEFAULT.
fsl_aiop_parser.h: Some changes in parser_starting_hxs_code.
fsl_aiop_parser.h: Fixed PARSER_GEN_PARSE_RES_MTYPE.
parser.h: Fixed PARSER_GEN_PARSE_RES_MTYPE.
aiop_parser.c : change name to parser.c.
aiop_parser.c : fixed implementation bugs.
fsl_aiop_system.h : change name to system.h.
system.h: removed functions input parameters.
aiop_system.c: change name to system.c.
system.c.: removed functions input parameters.
aiop_id_pool.h: change name to id_pool.h.
aiop_fdma.c: change name to fdma.c.
fdma.c: Add fdma_copy_data() Service Routine.
fdma.c: Add fdma_store_frame_data() Service Routine.
fdma.c: Add fdma_store_frame_data() Service Routine.
fdma.c: Fix CR:ENGR00288335.
aiop_fdma.h: change name to fdma.h.
fdma.h: Add fdma_copy_data() Service Routine.
fdma.h: Add fdma_store_frame_data() Service Routine.
fdma.h: Add fdma_discard_frame() Service Routine.
fdma.h: Fix CR:ENGR00288335.
fsl_aiop_fdma.h: change name to fsl_fdma.h.
fsl_fdma.h: Add fdma_copy_data() Service Routine.
fsl_fdma.h: Add fdma_store_frame_data() Service Routine.
fsl_fdma.h: Add fdma_discard_frame() Service Routine.
fsl_fdma.h: Add no_flags definition to all flag groups.
fsl_fdma.h: Update error statuses.
aiop_general.h: change name to general.h.
general.h: Remove parameter qd_priority from function dpni_drv_send and add it into the TLS.
general.h: Remove err_fqid from the DPNI structure. 
general.h: Add macros to verify a structure size does not exceed the size a user allocates for that structure.
general.h: Removed get_number_of_cpus() and get_cpu_id() and dump_stack()
fsl_gro.h: Add initial API for GRO.
gro.h: Add initial internal API for GRO.
gro.c: Add initial empty implementation for GRO.
fsl_gso.h: Add initial API for GSO.
gso.h: Add initial internal API for GSO.
gso.c: Add initial implementation for GSO.
aiop_cdma.c: change name to cdma.c.
aiop_cdma.h: change name to cdma.h.
fsl_aiop_cdma.h: change name to fsl_cdma.h.
aiop_osm.c: change name to osm.c.
aiop_osm.h: change name to osm.h.
fsl_aiop_osm.h: change name to fsl_osm.h.
aiop_spinlock.c: change name to spinlock.c.
fsl_aiop_spinlock.h: change name to fsl_spinlock.h.
aiop_spinlock.c: Add atomic increment/decrement Service Routines. 
fsl_aiop_spinlock.h: Add atomic increment/decrement Service Routines.
fsl_cdma.h: Update error statuses.
fsl_aiop_checksum.h: was renamed to fsl_checksum.h
fsl_checksum.h: was spliltted to fsl_l4_checksum.h and fsl_ipv4_checksum.h
fsl_l4_checksum.h: new file genereted from fsl_checksum.h for the L4 checksum
fsl_ipv4_checksum.h: new file genereted from fsl_checksum.h for the IPv4 checksum
aiop_checksum.c: was renamed to checksum.c
checksum.c: was spliltted to l4_checksum.c and ipv4_checksum.c
l4_checksum.c: new file genereted from checksum.c for the L4 checksum
ipv4_checksum.c: new file genereted from checksum.c for the IPv4 checksum
fsl_aiop_ctlu.h: was renamed to fsl_ctlu.c
fsl_ctlu.h: separated lookup miss result indication and lookup no match indication
aiop_ctlu.h: was renamed to ctlu.c
ctlu.c: Fixed CR:ENGR00288390
ctlu.c: Added some castings
ctlu.h: MTYPES fixes




Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6
	FD_section   0.62.2
	Parser_Block_Guide	3.40 (Maturity level 0.95)
	AIOP_Instruction_Additions 0.60
	Compiler Build 265


AIOP Core Library V2.1 Change Log

fsl_tman.h: rename tman_modify_timer function to tman_increase_timer_duration
fsl_tman.h: rename max_no_of_timers variable to max_num_of_timers
fsl_tman.h: changes due to new compiler versions
fsl_tman.h: Updated function to support Archdef 0.71
fsl_ste.h: Updated function to support Archdef 0.71
fsl_aiop_header_modification.h: Update doxygen
fsl_aiop_header_modification_errors.h: New file containing errors return status
fsl_aiop_header_modification_open_flow.h: Update doxygen
fsl_aiop_header_modification_open_flow.h: change API of hm_pop_vlan()
aiop_fdma.c: Add SRs: fdma_read_asa(), fdma_read_pta().
aiop_fdma.c: Change functions name - fdma_initial_default_frame_presentation() -> fdma_present_default_frame().
aiop_fdma.c: Change functions name - fdma_initial_frame_presentation() -> fdma_present_frame().
aiop_fdma.c: Change functions name - fdma_calculate_checksum() -> fdma_calculate_default_frame_checksum()
aiop_fdma.c: Add _default_ to SRs which works on the default task values.
aiop_fdma.c: Change all addresses names to *xx_dst and *xx_src.
aiop_fdma.c: Change functions name - Add fdma_modify_default_segment_data() SR.
aiop_fdma.c: Change functions name - fdma_trim_default_segment()-> fdma_trim_default_segment_presentation().
aiop_fdma.c: Change functions name - fdma_enqueue_default_frame_fqid()-> fdma_store_and_enqueue_default_frame_fqid().
aiop_fdma.c: Change functions name - fdma_enqueue_default_frame_qd()-> fdma_store_and_enqueue_default_frame_qd().
fsl_aiop_fdma.h: Add SRs: fdma_read_asa(), fdma_read_pta().
fsl_aiop_fdma.h: Change functions name - fdma_initial_default_frame_presentation() -> fdma_present_default_frame().
fsl_aiop_fdma.h: Change functions name - fdma_initial_frame_presentation() -> fdma_present_frame().
fsl_aiop_fdma.h: Change functions name - fdma_calculate_checksum() -> fdma_calculate_default_frame_checksum()
fsl_aiop_fdma.h: Add _default_ to SRs which works on the default task values.
fsl_aiop_fdma.h: Change all addresses names to *xx_dst and *xx_src.
fsl_aiop_fdma.h: Change functions name - Add fdma_modify_default_segment_data() SR.
fsl_aiop_fdma.h: Change functions name - fdma_trim_default_segment()-> fdma_trim_default_segment_presentation().
fsl_aiop_fdma.h: Change functions name - fdma_enqueue_default_frame_fqid()-> fdma_store_and_enqueue_default_frame_fqid().
fsl_aiop_fdma.h: Change functions name - fdma_enqueue_default_frame_qd()-> fdma_store_and_enqueue_default_frame_qd().
aiop_general.h: Add ipv6 header struct.
aiop_general.h: Add AIOP Default Task Parameters struct.
aiop_general.c: Add declaration of AIOP Default Task Parameters.
fsl_aiop_system.h: A new file which includes functions for Creation and Initialization of system Parser Profile ID pool and system CTLU Key ID pool.
aiop_system.c: Add system global params: ext_prpid_pool_address and ext_keyid_pool_address
aiop_system.c: A new file which includes functions for Creation and Initialization of system Parser Profile ID pool and system CTLU Key ID pool.
aiop_id_pool.h: A new file which includes functions for get id and release id from/to pool.
fsl_aiop_ctlu.h: Updated API of some KCR build functions.
fsl_aiop_ctlu.h: Split ctlu_kcr_create_or_update() to: ctlu_kcr_create() which returns keyid instead of receiving it, and ctlu_kcr_replace() which receives keyid.
fsl_aiop_ctlu.h: Key Composition Rule Builder Protocol FECID is now enum.
fsl_aiop_ctlu.h: added description to reserved fields
fsl_aiop_ctlu.h: changed ctlu_table_lookup_keyid and ctlu_table_lookup_key to ctlu_table_lookup_by_keyid and ctlu_table_lookup_by_key
fsl_aiop_ctlu.h: changed ctlu_lookup_result[opaque0] to ctlu_lookup_result[opaque_or_reference]
fsl_aiop_ctlu.h: changed output params in ctlu_gen_key to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: changed input params in ctlu_gen_hash to union ctlu_key + size from struct ctlu_rule_key *key. 
fsl_aiop_ctlu.h: changed input params in ctlu_table_rule_delete to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: changed input params in ctlu_table_lookup_by_key to union ctlu_key + size from struct ctlu_rule_key *key.
fsl_aiop_ctlu.h: added CTLU_KEY_LPM_IPV4_SIZE
fsl_aiop_ctlu.h: added CTLU_KEY_LPM_IPV6_SIZE
fsl_aiop_ctlu.h: changed API of ctlu_kcr_delete
fsl_aiop_parser.h: Separated between error indications and other indications.
fsl_aiop_parser.h: Added getters for Pointer in Frame.
fsl_aiop_parser.h: Split statuses according to functions.
fsl_aiop_parser.h: HXS coding is now enum. Also, removed IPv4, IPv6 HXS coding.
fsl_aiop_parser.h: Split parser_profile_create_update() to: parser_profile_create() which returns prpid instead of providing it, and parser_profile_replace() which receives prpid.
fsl_aiop_parser.h: Split parse_result_generate() to: parse_result_generate_default() which uses implicit starting HXS, and parse_result_generate() which recieves starting HXS and starting_offset.
fsl_aiop_parser.h: Add getter for error code in parse result.
fsl_aiop_cksum.h: added cksum_ones_complement_sum16 inline function
fsl_aiop_cksum.h: added more documentation

Doc & Tool compatibility:
	AIOP Archdef 0.7.1
	CTLU Archdef 0.6.9
	AIOP_Instruction_Additions 0.60
	Compiler Build 264
	
	
AIOP Core Library V2.0 Change Log

aiop_general.h: Added udp and tcp headers to general.h
aiop_general.h: Add Getters and Setters to the presentation context area fields.
fsl_aiop_fdma.h: Unite Command flags for a specific option to enum.
fsl_aiop_fdma.h: Add SRs: fdma_replicate_working_frame_fqid(), fdma_replicate_working_frame_qd(),  fdma_calculate_checksum(), fdma_enqueue_fd_fqid(), fdma_enqueue_fd_qd(), fdma_concatenate_frames().
fsl_aiop_fdma.h: Change all addresses to (void *).
fsl_aiop_fdma.h: Improve replace commands (Replace segment, Insert segmet data, Delete segmet data) API and documentation.
aiop_fdma.c: Change all addresses to (void *).
aiop_fdma.c: Improve replace commands (Replace segment, Insert segmet data, Delete segmet data) API and implementation.
aiop_fdma.c: Add SRs: fdma_replicate_working_frame_fqid(), fdma_replicate_working_frame_qd(), fdma_calculate_checksum(), fdma_enqueue_frame_fqid(), fdma_enqueue_frame_qd(), fdma_concatenate_frames().
aiop_fdma.h: Add SRs: fdma_replicate_working_frame_fqid(), fdma_replicate_working_frame_qd(), fdma_calculate_checksum(), fdma_enqueue_frame_fqid(), fdma_enqueue_frame_qd(), fdma_concatenate_frames().
fsl_aiop_parser.h: Added HXS codes
fsl_aiop_parser.h: Added defines and structs for HXS configurations in parser profiles
fsl_aiop_parser.h: Modified parser API's.
fsl_aiop_ip_frag.h: No change.
fsl_aiop_ipsec.h: No change.
fsl_aiop_ctlu.h: added documentation
fsl_aiop_ctlu.h: changed context record to application context
fsl_aiop_ctlu.h: changed ctlu_key_em to ctlu_key_exact_match
fsl_aiop_ctlu.h: simplified lookup result & table result
fsl_aiop_ctlu.h: changed key in ctlu_rule_key to be in the structure (instead of referenced by the structure). 
fsl_aiop_checksum.h: validation SRs removed due to similar functionality existence in parser SRs.
fsl_aiop_checksum.h: updated checksum calculation SRs.
fsl_aiop_ipr.h: add IP version in ipr_get_number_of_reassembled_frames.

AIOP Core Library V1.4 Change Log

fsl_aiop_ste.h: Functions names changes
fsl_aiop_ste.h: Changes reflecting ArchDEF 0.7.
fsl_aiop_ste.h: Removed MAX, MIN, Get functions.
fsl_aiop_ste.h: Changed mode_bits name into flags.
fsl_aiop_ste.h: Changed size flags according to new archdef.
fsl_aiop_ste.h: Changed command addresses and opcode according to new archdef.
fsl_aiop_ste.h: Added comment that external address can be also PEB and L3 cache.
fsl_aiop_ste.h: Doxygen Fixes.
aiop_ste.c: Function name changes
aiop_ste.c: Change hardware accelerator call to __e_hwacceli
aiop_ste.c: Added new compiler instructions to the STE Barrier command
aiop_ste.c: Changes reflecting ArchDEF 0.7.
aiop_ste.c: Removed MAX, MIN, Get functions.
aiop_ste.c: Changed mode_bits name into flags.
aiop_ste.c: Changed size flags according to new archdef.
aiop_ste.c: Changed command addresses and opcode according to new archdef.
aiop_ste.c: Added comment that external address can be also PEB and L3 cache.
aiop_ste.c: Changed SET function to use the STE rather than the CDMA (now it returns void).
aiop_ste.c: Fixed a bug in barrier command.
aiop_ste.c: Changes to support compiler ver 260. 
fsl_aiop_tman.h: Added include general.h
fsl_aiop_tman.h: Change output parameters to be the last parameters in the function
aiop_tman.c: Change hardware accelerator call to __e_hwacceli
aiop_tman.c: Added new compiler instructions to the STE Barrier command
aiop_tman.c: Clear reserve bits in the TMAN status
aiop_tman.c: Changes to support compiler ver 260 
aiop_general.h: Add HWC Accelerator Context definitions.
aiop_general.h: Update PRC definitions.
aiop_general.h: Add __TASK definition (used for task global variables).
fsl_aiop_fdma.h: Remove commands definitions (moved to internal FDMA file).
fsl_aiop_fdma.h: Update SRs API.
fsl_aiop_fdma.h: Rename aiop_fdma_fetch_hw_annotation() -> fdma_read_asa().
fsl_aiop_fdma.h: Rename aiop_fdma_fetch_sw_annotation() -> fdma_read_pta().
fsl_aiop_fdma.h: Remove _aiop_ prefix in functions and macros.
aiop_fdma.c: Add SR implementation.
aiop_fdma.c: Adjust to compiler build 260.
aiop_fdma.c: Modify addresses to pointers.
aiop_fdma.c: Remove _aiop_ prefix in functions and macros.
aiop_fdma.h: Added a new file. Contains internal FDMA Commands definitions.
fsl_aiop_ipr.h: Change file name (former aiop_ipr.h).
fsl_aiop_ipr.h: All functions were renamed name to have prefix ipr_ and change prefix modules for Doxygen.
fsl_aiop_ipr.h: Add Copyright.
fsl_aiop_cdma.h: Added a new file - This file contains the CDMA functions. All functions were internally reviewed.
aiop_cdma.h: Added a new file - This file contains defines for internal use of the CDMA functions.
aiop_cdma.c: Added a new file - This file contain the CDMA functions definitions. All functions were reviewed but not tested.
fsl_aiop_osm.h: All funcions were renamed. from aiop_osm_function_name to osm_function_name.
fsl_aiop_parser.h: Added Parser API functions.
fsl_aiop_parser.h: All funcions were renamed from aiop_parser_function_name to parser_function_name.
fsl_aiop_ctlu.h: added return status
fsl_aiop_ctlu.h: more documentation 
fsl_aiop_ctlu.h: added more defines
fsl_aiop_ctlu.h: added aiop_ctlu_key_composition_create_or_update
fsl_aiop_ctlu.h: added aiop_ctlu_key_composition_rule_query
fsl_aiop_ctlu.h: added opaque2
fsl_aiop_ctlu.h: added aging timestamp support
fsl_aiop_ctlu.h: added KCR builder functions
aiop_ctlu.h: added file
aiop_ctlu.c: added file
Doc & Tool compatibility:
	AIOP_Archdef 0.7.0, exceptions: CTLU BG 0.6.7
	AIOP_Instruction_Additions 0.51
	Compiler build 260
	AIOP Simulator T4LS_SIM-20130904-ENGG_BUILD  (support for FDMA, STE, TLU)
	
AIOP Core Library V1.3 Change Log

fsl_ldpaa.h: Added new file - Add FD structure definition and type definitions.
aiop_general.h: Remove FD structure (moved to fsl_ldpaa.h).
aiop_general.h: Update PRC and ADC offsets.
aiop_general.h: Add inline assembler macros for swap instructions, load and store instructions, rlXXX instructions.
aiop_general.h: Add FD Getters and Setters initial macros.
aiop_general.h: Remove type definitions (moved to fsl_ldpaa.h).
aiop_general.h: Add Accelerators IDs for CTLU, CDMA, TMAN.
aiop_general.h: Add _ to macros fields.
aiop_general.h: Remove Accelerators commands names (moved to accelerators headers).
aiop_general.h: Fix Doxygen + checkpatch.
aiop_fdma.c: Optimize code.
aiop_fdma.c: Add _fdma_ to fdma SRs.
aiop_fdma.c: Add _ to macros fields names.
aiop_fdma.c: Fix Doxygen + checkpatch.
aiop_fdma.h: Add _fdma_ to FDMA function names.
aiop_fdma.h: Update Store, Enqueue and Replace commands API.
aiop_fdma.h: Split Enqueue command to enqueue by FQID and Queueing Destination.
aiop_fdma.h: Fix Doxygen + checkpatch.
aiop_fdma.h: renamed to fsl_aiop_fdma.h.
aiop_statistics.h renamed to fsl_aiop_ste.h
aiop_ste.h: File added. This file contain defines for internal use of the STE functions.
fsl_aiop_ste.h: Rename all functions to comply with new AIOP API naming convention.
fsl_aiop_ste.h: Changes in parameter order to with API conventions and for code optimization.
aiop_ste.c: File added. This file contain the STE functions definitions.
aiop_ste.c: Functions aiop_ste_set_8bytes_counter, aiop_ste_inc_8bytes_counter and aiop_ste_read_8bytes_counter were reviewed but not tested. all other funcion definitions were not reviewed and not tested.
aiop_tman.h renamed to fsl_aiop_tman.h
fsl_aiop_tman.h: Rename all functions to comply with new AIOP API naming convention.
fsl_aiop_tman.h: Changes in parameter order to with API conventions and for code optimization.
aiop_tman.h: File added. This file contain defines for internal use of the TMAN functions.
aiop_tman.c: File added. This file contain the TMAN functions definitions.
aiop_tman.c: Functions aiop_tman_create_tmi, aiop_tman_create_timer, aiop_tman_recharge_timer and aiop_tman_timer_completion_confirmation were reviewed but not tested. all other funcion definitions were not reviewed and not tested.
fsl_aiop_ctlu.h: Removed type from aiop_ctlu_rule_key (to match HW).
fsl_aiop_ctlu.h: Removed default lookup.
fsl_aiop_ctlu.h: Key size paramater was added to table create.
fsl_aiop_ctlu.h: Removed keyID from table create.
fsl_aiop_ctlu.h: Miss rule is now inside table create parameters.
fsl_aiop_ctlu.h: Modified type to two bytes field instead of one.
aiop_ipsec.h: was renamed to fsl_aiop_ipsec.h
fsl_aiop_ipsec.h: No major changes.
aiop_gso.h was renamed to fsl_aiop_gso.h
fsl_aiop_gso.h: No major changes.
aiop_ip_frag.h renamed to fsl_aiop_ip_frag.h
fsl_aiop_ip_frag.h: No major changes.
aiop_checksum.h renamed to fsl_aiop_checksum.h
fsl_aiop_checksum.h: No major changes.
aiop_parser.h renamed to fsl_aiop_parser.h
fsl_aiop_parser.h: Added Parser return values.
fsl_aiop_parser.h: Added Frame attributes masks.
fsl_aiop_parser.h: Added Frame attributes macros.
fsl_aiop_parser.h: Added Get offsets macros.
aiop_memory_operations.h: was removed and will be replaced soon by fsl_aiop_cdma.
aiop_multi_threading.h: was removed and will be replaced soon by fsl_aiop_cdma.
aiop_osm.h: was replaced by fsl_aiop_osm.h
fsl_aiop_osm.h : updated the OSM API according to the AIOP e200 ISA extension document version 0.51.
aiop_header_modification.h: renamed to fsl_aiop_header_modification.h
aiop_header_modification_open_flow.h: renamed to fsl_aiop_header_modification_open_flow.h
aiop_statistics.h: renamed to fsl_aiop_ste.h and added aiop_ste.c and aiop_ste.h
fsl_aiop_checksum.h: was removed and will be replaced by functions in fsl_aiop_fdma.
Doc & Tool compatibility:
	AIOP_Archdef 0.6.5, exceptions: CTLU BG 0.6.6
	AIOP_Instruction_Additions 0.31
	CW 10.0.1
	Compiler build 257
	AIOP Simulator T4LS_SIM_A2_0_1
	

AIOP Core Library V1.2 Change Log

fsl_aiop_tlu.h: the term "entry" was changed to "rule" to align to the CTLU spec.
fsl_aiop_tlu.h: Restructred most of the structures.
fsl_aiop_tlu.h: added a lot of macros.
fsl_aiop_tlu.h: Split aiop_ctlu_gen_hash to aiop_ctlu_gen_hash_keyid and aiop_ctlu_gen_hash_key.
fsl_aiop_tlu.h: split aiop_ctlu_create rule function to aiop_ctlu_create_or_replace and aiop_ctlu_create functions.
fsl_aiop_tlu.h: Timer mechanism (defeatured) replaced with timestamp mechanism.
fsl_aiop_tlu.h: Byte Counter and hit counter are supported through a combination of lookup and stats SR.
fsl_aiop_tlu.h: Fetch/Fetch Shared are supported through a combination of lookup and CDMA SR (to be added fsl_aiop_cdma.h).
fsl_aiop_tlu.h: Table statistics includes current number of rules (to be added)
fsl_aiop_tlu.h: reference count functions were removed from CTLU section (to be added in fsl_aiop_cdma.h).
fsl_aiop_tlu.h: doxygen comments.
fsl_aiop_tlu.h: coding style.
fsl_aiop_tlu.h: aging resolution is no longer supported per table (is now configurable in a CTLU register at initialization time)
fsl_aiop_tlu.h: all callback epids were removed.
fsl_aiop_tlu.h: Add/delete entry by frame functions removed (user can call gen_key + add/delete rule instead)
aiop_gso.h: no changes
aiop_ip_frag.h: modified parameters
aiop_ip_frag.h: removed counters
aiop_ip_frag.h: doxygen comments
aiop_parser.h: added file
aiop_ipsec.h: changed functions parameters
aiop_checksum.h: no changes
aiop_memory_operations.h: Doxygen updates
aiop_multi_threading.h: Doxygen updates
aiop_osm.h: Doxygen updates
aiop_fdma.h: Change file name from aiop_frame_operations.h to aiop_fdma.h
aiop_fdma.h: Update 3 SRs API (Store frame, Enqueue Working frame, Replace Frame Segment)
aiop_fdma.h: Doxygen updates
aiop_fdma.c: Change file name from aiop_frame_operations.c to aiop_fdma.c
aiop_fdma.c:Implement 3 SRs (Store frame, Enqueue Working frame, Replace Frame Segment)
aiop_fdma.c: Doxygen updates
aiop_general.h: Update FD structure + masks and offsets
aiop_general.h: Update ADC structure + masks and offsets
aiop_general.h: Update PRC structure + masks and offsets
aiop_general.h: Doxygen updates
aiop_ipr.h: Fixed padding warning on ipr_config structure.
aiop_ipr.h: Changed callback functions type in the ipr_config structure.
aiop_statistics.h: Added functions aiop_set_4bytes_counter,  aiop_set_8bytes_counter.
aiop_statistics.h: Added functions aiop_set_max_4bytes_counter,  aiop_set_max_8bytes_counter.
aiop_statistics.h: Added functions aiop_set_min_4bytes_counter,  aiop_set_min_8bytes_counter.
aiop_statistics.h: Added functions aiop_increment_4bytes_counter,  aiop_increment_8bytes_counter.
aiop_statistics.h: Added functions aiop_decrement_4bytes_counter,  aiop_decrement_8bytes_counter.
aiop_statistics.h: Added functions aiop_read_4bytes_counter,  aiop_read_8bytes_counter.
aiop_statistics.h: Changed aiop_stat_flush function to aiop_sync_statistics.
aiop_tman.h: Added all TMAN API functions.
Doc & Tool compatibility:
	AIOP_Archdef 0.6.5, exceptions: CTLU BG 0.6.5
	AIOP_Instruction_Additions 0.31
	CW 10.0.1
	Compiler build 257
	AIOP Simulator T4LS_SIM_A2_0_1

AIOP Core Library V1.1 Change Log

- aiop_ipr.h: Doxygen changes.
- aiop_ipr.h: Update IPR configuration structure to comply with SRS.
- aiop_ipr.h: Added IPR mode bits to configure IPR behavior.
- aiop_ipr.h: Added function - aiop_number_of_reassembled_frames().
- aiop_statistics.h: Doxygen changes (added group).
- aiop_header_modification.h: Doxygen changes.
- aiop_header_modification.h: Added mode bits definitions to all functions.
- aiop_header_modification_open_flow.h: Doxygen changes.
- aiop_header_modification_open_flow.h: changed aiop_set_dl_src function parameter type.
- aiop_header_modification_open_flow.h: changed aiop_set_dl_dst function parameters.
- aiop_header_modification_open_flow.h: changed aiop_set_nw_dst function parameters.
- aiop_header_modification_open_flow.h: changed aiop_push_vlan function parameters.
- aiop_header_modification_open_flow.h: changed aiop_pop_vlan function parameters.
- aiop_header_modification.h: removed aiop_p_bit_marking function.
- aiop_memory_operations.h: removed aiop_contex_presentation_dma_read. (very old and irrelevant)
- aiop_memory_operations.h: removed aiop_contex_presentation_dma_write. (very old and irrelevant)
- tlu.h: Doxygen tweaks

