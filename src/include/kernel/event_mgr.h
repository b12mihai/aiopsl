/**************************************************************************//**
 @File          event_mgr.h

 @Description   AIOP Event Manager Header file
                Contains AIOP Event Manager API functions declarations.

 @Cautions      None.
*//***************************************************************************/

#ifndef _EVENT_MGR_H
#define _EVENT_MGR_H

#include "common/types.h"
#include "common/fsl_core.h"
 
/**************************************************************************//**
 @Group         event_mgr EVENT_MGR (AIOP Event Manager)

 @Description   The event manager facilitates a common mechanism in AIOP, for
                intra-application communication. The AIOP applications can 
		register event handlers (callback functions) to Event Manager to 
		listen to events that are generated by other AIOP applications. 
                An AIOP application can listen to events generated by a single
	        AIOP application, group of applications or all applications by
	       	specifying information while registering its event handler. It 
		can also specify priority of the event handler. When an event 
		is generated in AIOP and if there are multiple event handlers
	       	registered for that event, the event handlers are invoked in 
		the ascending order of priority. The priority field is a number
	       	ranging from 0 to 255 (8-bit unsigned integer).

                Up to 64 applications are allowed to register to event manager. 
                Up to 255 different events are allowed.

 @{
*//***************************************************************************/ 

struct opaque_args;

/**************************************************************************//**
 @Function      evm_cb_t 

 @Description   Prototype for event manager callback function 

 @Param[in]     evm_appid - Appid of the application generating the event 
 @Param[in]     event_id - Unique event_id in 0..255 range, Applications 
                maintain a common enumerator to assure event_id synchronization 
 @Param[in]     opaque_args - Pointer to opaque struct with the callback arguments

 @Return        Indicates completion status of the function.

 @Cautions      None
*//***************************************************************************/
typedef int (evm_cb_t)( 
	uint8_t evm_appid,
	uint8_t event_id,
	struct opaque_args *
);

/**************************************************************************//**
 @Function      evm_register_callback 

 @Description   Called by an application in order to registers or modify a 
                callback function. Consecutive call of the function with the 
		same event_id and callback updates the app_listen_mask 
		and priority values. 

 @Param[in]     evm_event_id - Unique event_id in 0..255 range, Applications 
                maintain a common enumerator to assure event_id synchronization. 
 @Param[in]     app_listen_mask - Mask of the evm_appid that the current 
                application should listen to. Only signals from evm_appid with 
		enabled bit in the mask (left shifted) are triggering the callback. 
		Value 0xfffffff_ffffffff means receive signals for any application.
	       	0x1 receive signal from evm_appid 1.

 @Param[in]     priority - Defines the priority of the callback. When a number 
                of callbacks are registered for the same event, the highest 
		priority callback is called first. When callbacks with the same 
		priority are registered, the last registered callback is called first. 

 @Param[in]     type - Implementation dependant. Used to switch between different 
                indirect invocation implementation if needed. 

 @Param[in]     cb - Pointer to the event callback functoin

 @Return        Indicates completion status of the function – 0 on success, 
                other to indicate error. 

 @Cautions      None
*//***************************************************************************/
int evm_register_callback(
	uint8_t evm_event_id,
	uint64_t app_listen_mask,
	uint8_t priority,
	uint8_t type,  
	evm_cb_t cb
);

/**************************************************************************//**
 @Function      evm_deregister_callback 

 @Description   Called by an application to deregisters a callback function. 

 @Param[in]     evm_event_id - Unique event_id in 0..255 range, Applications 
                maintain a common enumerator to assure event_id synchronization. 
 @Param[in]     cb - Pointer to the event callback functoin

 @Return        Indicates completion status of the function – 0 on success,
                other to indicate error. Function fails if no registered 
		callback was found for the event_id

 @Cautions      None
*//***************************************************************************/
int evm_deregister_callbackb( 
	uint8_t evm_event_id,
	evm_cb_t cb
);

/**************************************************************************//**
 @Function      evm_event_raise 

 @Description   Called by an AIOP application to signal  an event.

 @Param[in]     evm_appid - Appid of the application generating the event.
                The evm_appid is compared against the app_listen_mask of 
		the registered callback. 

 @Param[in]     evm_event_id - Unique event_id in 0..255 range, Applications 
                maintain a common enumerator to assure event_id synchronization 

 @Param[in]     opaque_args - Pointer to opaque struct with the callback arguments

 @Return        Indicates completion status of the function – AIOP application
                convention 

 @Cautions      None
*//***************************************************************************/
int evm_event_raise( 
	uint8_t evm_appid,
	uint8_t event_id,
	struct opaque_args *
);


/** @} */ /* end of aiop_apps_init group */


#endif /* _EVENT_MGR_H */

